/**
 * @fileoverview gRPC-Web generated client stub for finternet
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.2
// source: service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.finternet = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.DriverClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.DriverPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.LoadDriverRequest,
 *   !proto.finternet.LoadDriverResponse>}
 */
const methodDescriptor_Driver_LoadDriver = new grpc.web.MethodDescriptor(
  '/finternet.Driver/LoadDriver',
  grpc.web.MethodType.UNARY,
  proto.finternet.LoadDriverRequest,
  proto.finternet.LoadDriverResponse,
  /**
   * @param {!proto.finternet.LoadDriverRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.LoadDriverResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.LoadDriverRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.LoadDriverResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.LoadDriverResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.DriverClient.prototype.loadDriver =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Driver/LoadDriver',
      request,
      metadata || {},
      methodDescriptor_Driver_LoadDriver,
      callback);
};


/**
 * @param {!proto.finternet.LoadDriverRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.LoadDriverResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.DriverPromiseClient.prototype.loadDriver =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Driver/LoadDriver',
      request,
      metadata || {},
      methodDescriptor_Driver_LoadDriver);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.UnloadDriverRequest,
 *   !proto.finternet.UnloadDriverResponse>}
 */
const methodDescriptor_Driver_UnloadDriver = new grpc.web.MethodDescriptor(
  '/finternet.Driver/UnloadDriver',
  grpc.web.MethodType.UNARY,
  proto.finternet.UnloadDriverRequest,
  proto.finternet.UnloadDriverResponse,
  /**
   * @param {!proto.finternet.UnloadDriverRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.UnloadDriverResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.UnloadDriverRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.UnloadDriverResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.UnloadDriverResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.DriverClient.prototype.unloadDriver =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Driver/UnloadDriver',
      request,
      metadata || {},
      methodDescriptor_Driver_UnloadDriver,
      callback);
};


/**
 * @param {!proto.finternet.UnloadDriverRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.UnloadDriverResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.DriverPromiseClient.prototype.unloadDriver =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Driver/UnloadDriver',
      request,
      metadata || {},
      methodDescriptor_Driver_UnloadDriver);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.ListResolverRequest,
 *   !proto.finternet.ListResolverResponse>}
 */
const methodDescriptor_Driver_ListResolver = new grpc.web.MethodDescriptor(
  '/finternet.Driver/ListResolver',
  grpc.web.MethodType.UNARY,
  proto.finternet.ListResolverRequest,
  proto.finternet.ListResolverResponse,
  /**
   * @param {!proto.finternet.ListResolverRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.ListResolverResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.ListResolverRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.ListResolverResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.ListResolverResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.DriverClient.prototype.listResolver =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Driver/ListResolver',
      request,
      metadata || {},
      methodDescriptor_Driver_ListResolver,
      callback);
};


/**
 * @param {!proto.finternet.ListResolverRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.ListResolverResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.DriverPromiseClient.prototype.listResolver =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Driver/ListResolver',
      request,
      metadata || {},
      methodDescriptor_Driver_ListResolver);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.BindClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.BindPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.BindRequest,
 *   !proto.finternet.BindResponse>}
 */
const methodDescriptor_Bind_Bind = new grpc.web.MethodDescriptor(
  '/finternet.Bind/Bind',
  grpc.web.MethodType.UNARY,
  proto.finternet.BindRequest,
  proto.finternet.BindResponse,
  /**
   * @param {!proto.finternet.BindRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.BindResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.BindRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.BindResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.BindResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.BindClient.prototype.bind =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Bind/Bind',
      request,
      metadata || {},
      methodDescriptor_Bind_Bind,
      callback);
};


/**
 * @param {!proto.finternet.BindRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.BindResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.BindPromiseClient.prototype.bind =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Bind/Bind',
      request,
      metadata || {},
      methodDescriptor_Bind_Bind);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.UnbindRequest,
 *   !proto.finternet.UnbindResponse>}
 */
const methodDescriptor_Bind_Unbind = new grpc.web.MethodDescriptor(
  '/finternet.Bind/Unbind',
  grpc.web.MethodType.UNARY,
  proto.finternet.UnbindRequest,
  proto.finternet.UnbindResponse,
  /**
   * @param {!proto.finternet.UnbindRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.UnbindResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.UnbindRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.UnbindResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.UnbindResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.BindClient.prototype.unbind =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Bind/Unbind',
      request,
      metadata || {},
      methodDescriptor_Bind_Unbind,
      callback);
};


/**
 * @param {!proto.finternet.UnbindRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.UnbindResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.BindPromiseClient.prototype.unbind =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Bind/Unbind',
      request,
      metadata || {},
      methodDescriptor_Bind_Unbind);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.ExecutionClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.ExecutionPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.ExecutionRequest,
 *   !proto.finternet.ExecutionResponse>}
 */
const methodDescriptor_Execution_Execute = new grpc.web.MethodDescriptor(
  '/finternet.Execution/Execute',
  grpc.web.MethodType.UNARY,
  proto.finternet.ExecutionRequest,
  proto.finternet.ExecutionResponse,
  /**
   * @param {!proto.finternet.ExecutionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.ExecutionResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.ExecutionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.ExecutionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.ExecutionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.ExecutionClient.prototype.execute =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Execution/Execute',
      request,
      metadata || {},
      methodDescriptor_Execution_Execute,
      callback);
};


/**
 * @param {!proto.finternet.ExecutionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.ExecutionResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.ExecutionPromiseClient.prototype.execute =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Execution/Execute',
      request,
      metadata || {},
      methodDescriptor_Execution_Execute);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.SubmitProgramRequest,
 *   !proto.finternet.SubmitProgramResponse>}
 */
const methodDescriptor_Execution_Submit = new grpc.web.MethodDescriptor(
  '/finternet.Execution/Submit',
  grpc.web.MethodType.UNARY,
  proto.finternet.SubmitProgramRequest,
  proto.finternet.SubmitProgramResponse,
  /**
   * @param {!proto.finternet.SubmitProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.SubmitProgramResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.SubmitProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.SubmitProgramResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.SubmitProgramResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.ExecutionClient.prototype.submit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Execution/Submit',
      request,
      metadata || {},
      methodDescriptor_Execution_Submit,
      callback);
};


/**
 * @param {!proto.finternet.SubmitProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.SubmitProgramResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.ExecutionPromiseClient.prototype.submit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Execution/Submit',
      request,
      metadata || {},
      methodDescriptor_Execution_Submit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.ListProgramRequest,
 *   !proto.finternet.ListProgramResponse>}
 */
const methodDescriptor_Execution_List = new grpc.web.MethodDescriptor(
  '/finternet.Execution/List',
  grpc.web.MethodType.UNARY,
  proto.finternet.ListProgramRequest,
  proto.finternet.ListProgramResponse,
  /**
   * @param {!proto.finternet.ListProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.ListProgramResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.ListProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.ListProgramResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.ListProgramResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.ExecutionClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.Execution/List',
      request,
      metadata || {},
      methodDescriptor_Execution_List,
      callback);
};


/**
 * @param {!proto.finternet.ListProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.ListProgramResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.ExecutionPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.Execution/List',
      request,
      metadata || {},
      methodDescriptor_Execution_List);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.DriverDetailsClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.finternet.DriverDetailsPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.finternet.DriverDetailsRequest,
 *   !proto.finternet.DriverDetailsResponse>}
 */
const methodDescriptor_DriverDetails_SendDetails = new grpc.web.MethodDescriptor(
  '/finternet.DriverDetails/SendDetails',
  grpc.web.MethodType.UNARY,
  proto.finternet.DriverDetailsRequest,
  proto.finternet.DriverDetailsResponse,
  /**
   * @param {!proto.finternet.DriverDetailsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.finternet.DriverDetailsResponse.deserializeBinary
);


/**
 * @param {!proto.finternet.DriverDetailsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.finternet.DriverDetailsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.finternet.DriverDetailsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.finternet.DriverDetailsClient.prototype.sendDetails =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/finternet.DriverDetails/SendDetails',
      request,
      metadata || {},
      methodDescriptor_DriverDetails_SendDetails,
      callback);
};


/**
 * @param {!proto.finternet.DriverDetailsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.finternet.DriverDetailsResponse>}
 *     Promise that resolves to the response
 */
proto.finternet.DriverDetailsPromiseClient.prototype.sendDetails =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/finternet.DriverDetails/SendDetails',
      request,
      metadata || {},
      methodDescriptor_DriverDetails_SendDetails);
};


module.exports = proto.finternet;

