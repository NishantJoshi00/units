syntax = "proto3";

package finternet;

service Driver {
  // LoadDriver
  rpc LoadDriver(LoadDriverRequest) returns (LoadDriverResponse);

  // UnloadDriver
  rpc UnloadDriver(UnloadDriverRequest) returns (UnloadDriverResponse);

  // ListResolver
  rpc ListResolver(ListResolverRequest) returns (ListResolverResponse);
}

message ListResolverRequest {
}

message ListResolverResponse {
    repeated PathMapping path_mapping = 1;
}

message PathMapping {
    string path = 1;
    string driver_name = 2;
    string driver_version = 3;
    string account_info = 4;
}

message LoadDriverRequest {
  string driver_name = 1;
  string driver_version = 2;
  bytes driver_binary = 4;
}

message LoadDriverResponse {
  string driver_name = 2;
  string driver_version = 3;
}

message UnloadDriverRequest {
   string driver_name = 1; 
   string driver_version = 2;
   }

message UnloadDriverResponse { 
  string driver_name = 1;
  string driver_version=2;
  }

service Bind {
  // Bind
  rpc Bind(BindRequest) returns (BindResponse);

  // Unbind
  rpc Unbind(UnbindRequest) returns (UnbindResponse);
}

message BindRequest {
  string driver_name = 1;
  string driver_version = 2;
  string path = 3;
  string account_info = 4;
}

message BindResponse {
  string driver_name = 1;
  string driver_version = 2;
  string path = 3;
  string account_info = 4;
}

message UnbindRequest { string path = 1; }

message UnbindResponse {
  string driver_name = 1;
  string driver_version = 3;
  string account_info = 4;
}

service Execution {
  // Execute
  rpc Execute(ExecutionRequest) returns (ExecutionResponse);
  // Submit
  rpc Submit(SubmitProgramRequest) returns (SubmitProgramResponse);
  // List
  rpc List(ListProgramRequest) returns (ListProgramResponse);
}

message ExecutionRequest {
  string input = 3;
  optional bytes binary = 5;
  optional string program_id = 6;
}

message SubmitProgramRequest {
  string name = 1;
  string version = 2;
  bytes binary = 5;
}

message ListProgramRequest {
}

message ListProgramResponse {
  repeated Program program = 1;
}

message Program {
    string program_id = 1;
    string name = 2;
    string version = 3;
}

message SubmitProgramResponse {
  string program_id = 1;
}
message ExecutionResponse { string output = 1; }

service DriverDetails {
  rpc SendDetails(DriverDetailsRequest) returns (DriverDetailsResponse);
}

message DriverDetailsRequest{
}

message DriverDetail {
    string name = 1;
    string version = 2;
}

message DriverDetailsResponse{
    string message = 1;
    repeated DriverDetail driver_data = 2;
}

service UserSignUp {
  rpc SignUp(SignUpRequest) returns (SignUpResponse);
}

message SignUpRequest {
  string user_name = 1;
  string name =2;
  string email = 3;
  string password = 4;

}

message SignUpResponse{
    string message = 1;
}

service UserLogin {
  rpc Login(LoginRequest) returns (LoginResponse);
}

message LoginRequest {
  string user_name = 1;
  string password = 2;

}

message LoginResponse{
    string message = 1;
}

service UserCheck {
  rpc Check(CheckRequest) returns (CheckResponse);
}

message CheckRequest {
}

message CheckResponse{
    bool message = 1;
    string user_name = 2;
}