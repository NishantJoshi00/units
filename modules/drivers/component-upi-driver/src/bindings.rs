// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod units {
        #[allow(dead_code, clippy::all)]
        pub mod http {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Method {
                Get,
                Post,
                Put,
                Delete,
            }
            impl ::core::fmt::Debug for Method {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Method::Get => f.debug_tuple("Method::Get").finish(),
                        Method::Post => f.debug_tuple("Method::Post").finish(),
                        Method::Put => f.debug_tuple("Method::Put").finish(),
                        Method::Delete => f.debug_tuple("Method::Delete").finish(),
                    }
                }
            }
            impl Method {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Method {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Method::Get,
                        1 => Method::Post,
                        2 => Method::Put,
                        3 => Method::Delete,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub method: Method,
                pub url: _rt::String,
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                pub body: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("method", &self.method)
                        .field("url", &self.url)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub status: u16,
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                pub body: _rt::String,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn send_request(request: &Request) -> Response {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = request;
                    let vec1 = url0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec5 = headers0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * 16,
                        4,
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 16);
                        {
                            let (t2_0, t2_1) = e;
                            let vec3 = t2_0;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = t2_1;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    let (result7_0, result7_1, result7_2) = match body0 {
                        Some(e) => {
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (1i32, ptr6.cast_mut(), len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/http")]
                    extern "C" {
                        #[link_name = "send-request"]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        method0.clone() as i32,
                        ptr1.cast_mut(),
                        len1,
                        result5,
                        len5,
                        result7_0,
                        result7_1,
                        result7_2,
                        ptr8,
                    );
                    let l9 = i32::from(*ptr8.add(0).cast::<u16>());
                    let l10 = *ptr8.add(4).cast::<*mut u8>();
                    let l11 = *ptr8.add(8).cast::<usize>();
                    let base18 = l10;
                    let len18 = l11;
                    let mut result18 = _rt::Vec::with_capacity(len18);
                    for i in 0..len18 {
                        let base = base18.add(i * 16);
                        let e18 = {
                            let l12 = *base.add(0).cast::<*mut u8>();
                            let l13 = *base.add(4).cast::<usize>();
                            let len14 = l13;
                            let bytes14 = _rt::Vec::from_raw_parts(
                                l12.cast(),
                                len14,
                                len14,
                            );
                            let l15 = *base.add(8).cast::<*mut u8>();
                            let l16 = *base.add(12).cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            (_rt::string_lift(bytes14), _rt::string_lift(bytes17))
                        };
                        result18.push(e18);
                    }
                    _rt::cabi_dealloc(base18, len18 * 16, 4);
                    let l19 = *ptr8.add(12).cast::<*mut u8>();
                    let l20 = *ptr8.add(16).cast::<usize>();
                    let len21 = l20;
                    let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                    if layout5.size() != 0 {
                        _rt::alloc::dealloc(result5.cast(), layout5);
                    }
                    Response {
                        status: l9 as u16,
                        headers: result18,
                        body: _rt::string_lift(bytes21),
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod storage {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum StorageError {
                NotFound(_rt::String),
                InvalidKey(_rt::String),
                SystemError(_rt::String),
                PermissionDenied(_rt::String),
                UnknownError(_rt::String),
            }
            impl ::core::fmt::Debug for StorageError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StorageError::NotFound(e) => {
                            f.debug_tuple("StorageError::NotFound").field(e).finish()
                        }
                        StorageError::InvalidKey(e) => {
                            f.debug_tuple("StorageError::InvalidKey").field(e).finish()
                        }
                        StorageError::SystemError(e) => {
                            f.debug_tuple("StorageError::SystemError").field(e).finish()
                        }
                        StorageError::PermissionDenied(e) => {
                            f.debug_tuple("StorageError::PermissionDenied")
                                .field(e)
                                .finish()
                        }
                        StorageError::UnknownError(e) => {
                            f.debug_tuple("StorageError::UnknownError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for StorageError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for StorageError {}
            #[allow(unused_unsafe, clippy::all)]
            pub fn get(key: &str) -> Result<_rt::String, StorageError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/storage")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v22 = match l6 {
                                    0 => {
                                        let e22 = {
                                            let l7 = *ptr1.add(8).cast::<*mut u8>();
                                            let l8 = *ptr1.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        StorageError::NotFound(e22)
                                    }
                                    1 => {
                                        let e22 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            _rt::string_lift(bytes12)
                                        };
                                        StorageError::InvalidKey(e22)
                                    }
                                    2 => {
                                        let e22 = {
                                            let l13 = *ptr1.add(8).cast::<*mut u8>();
                                            let l14 = *ptr1.add(12).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        StorageError::SystemError(e22)
                                    }
                                    3 => {
                                        let e22 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        StorageError::PermissionDenied(e22)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        let e22 = {
                                            let l19 = *ptr1.add(8).cast::<*mut u8>();
                                            let l20 = *ptr1.add(12).cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                l19.cast(),
                                                len21,
                                                len21,
                                            );
                                            _rt::string_lift(bytes21)
                                        };
                                        StorageError::UnknownError(e22)
                                    }
                                };
                                v22
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set(key: &str, value: &str) -> Result<(), StorageError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = value;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/storage")]
                    extern "C" {
                        #[link_name = "set"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr2.add(4).cast::<u8>());
                                let v20 = match l4 {
                                    0 => {
                                        let e20 = {
                                            let l5 = *ptr2.add(8).cast::<*mut u8>();
                                            let l6 = *ptr2.add(12).cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            _rt::string_lift(bytes7)
                                        };
                                        StorageError::NotFound(e20)
                                    }
                                    1 => {
                                        let e20 = {
                                            let l8 = *ptr2.add(8).cast::<*mut u8>();
                                            let l9 = *ptr2.add(12).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        StorageError::InvalidKey(e20)
                                    }
                                    2 => {
                                        let e20 = {
                                            let l11 = *ptr2.add(8).cast::<*mut u8>();
                                            let l12 = *ptr2.add(12).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            _rt::string_lift(bytes13)
                                        };
                                        StorageError::SystemError(e20)
                                    }
                                    3 => {
                                        let e20 = {
                                            let l14 = *ptr2.add(8).cast::<*mut u8>();
                                            let l15 = *ptr2.add(12).cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                l14.cast(),
                                                len16,
                                                len16,
                                            );
                                            _rt::string_lift(bytes16)
                                        };
                                        StorageError::PermissionDenied(e20)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        let e20 = {
                                            let l17 = *ptr2.add(8).cast::<*mut u8>();
                                            let l18 = *ptr2.add(12).cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                l17.cast(),
                                                len19,
                                                len19,
                                            );
                                            _rt::string_lift(bytes19)
                                        };
                                        StorageError::UnknownError(e20)
                                    }
                                };
                                v20
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod units {
            #[allow(dead_code, clippy::all)]
            pub mod driver {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum DriverError {
                    PermissionDenied(_rt::String),
                    SystemError(_rt::String),
                    InvalidInput(_rt::String),
                    UnknownError(_rt::String),
                }
                impl ::core::fmt::Debug for DriverError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            DriverError::PermissionDenied(e) => {
                                f.debug_tuple("DriverError::PermissionDenied")
                                    .field(e)
                                    .finish()
                            }
                            DriverError::SystemError(e) => {
                                f.debug_tuple("DriverError::SystemError").field(e).finish()
                            }
                            DriverError::InvalidInput(e) => {
                                f.debug_tuple("DriverError::InvalidInput").field(e).finish()
                            }
                            DriverError::UnknownError(e) => {
                                f.debug_tuple("DriverError::UnknownError").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for DriverError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for DriverError {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_intend_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::intend(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                DriverError::PermissionDenied(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                DriverError::SystemError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(12).cast::<usize>() = len5;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                DriverError::InvalidInput(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                DriverError::UnknownError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_intend<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_done_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::done(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                DriverError::PermissionDenied(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                DriverError::SystemError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                DriverError::InvalidInput(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(12).cast::<usize>() = len5;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                DriverError::UnknownError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_done<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_transfer_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result3 = T::transfer(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                    );
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Ok(_) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                DriverError::PermissionDenied(e) => {
                                    *ptr4.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr4.add(12).cast::<usize>() = len5;
                                    *ptr4.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                DriverError::SystemError(e) => {
                                    *ptr4.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4.add(12).cast::<usize>() = len6;
                                    *ptr4.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                DriverError::InvalidInput(e) => {
                                    *ptr4.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr4.add(12).cast::<usize>() = len7;
                                    *ptr4.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                DriverError::UnknownError(e) => {
                                    *ptr4.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr4.add(12).cast::<usize>() = len8;
                                    *ptr4.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_transfer<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_view_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::view(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                DriverError::PermissionDenied(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                DriverError::SystemError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(12).cast::<usize>() = len5;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                DriverError::InvalidInput(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                DriverError::UnknownError(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_view<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_bind_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result2 = T::bind(
                        _rt::string_lift(bytes0),
                        match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg4;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg3.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                DriverError::PermissionDenied(e) => {
                                    *ptr3.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3.add(12).cast::<usize>() = len5;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                DriverError::SystemError(e) => {
                                    *ptr3.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr3.add(12).cast::<usize>() = len6;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                DriverError::InvalidInput(e) => {
                                    *ptr3.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3.add(12).cast::<usize>() = len7;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                DriverError::UnknownError(e) => {
                                    *ptr3.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr3.add(12).cast::<usize>() = len8;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_bind<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn intend(input: _rt::String) -> Result<_rt::String, DriverError>;
                    fn done(input: _rt::String) -> Result<(), DriverError>;
                    fn transfer(
                        fro: _rt::String,
                        to: _rt::String,
                        value: _rt::String,
                    ) -> Result<(), DriverError>;
                    fn view(input: _rt::String) -> Result<_rt::String, DriverError>;
                    fn bind(
                        input: _rt::String,
                        existing: Option<_rt::String>,
                    ) -> Result<_rt::String, DriverError>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_units_driver_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name = "component:units/driver#intend"]
                        unsafe extern "C" fn export_intend(arg0 : * mut u8, arg1 :
                        usize,) -> * mut u8 { $($path_to_types)*::
                        _export_intend_cabi::<$ty > (arg0, arg1) } #[export_name =
                        "cabi_post_component:units/driver#intend"] unsafe extern "C" fn
                        _post_return_intend(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_intend::<$ty > (arg0) } #[export_name =
                        "component:units/driver#done"] unsafe extern "C" fn
                        export_done(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_done_cabi::<$ty > (arg0, arg1) }
                        #[export_name = "cabi_post_component:units/driver#done"] unsafe
                        extern "C" fn _post_return_done(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_done::<$ty > (arg0) }
                        #[export_name = "component:units/driver#transfer"] unsafe extern
                        "C" fn export_transfer(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,) -> * mut u8
                        { $($path_to_types)*:: _export_transfer_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5) } #[export_name =
                        "cabi_post_component:units/driver#transfer"] unsafe extern "C" fn
                        _post_return_transfer(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_transfer::<$ty > (arg0) } #[export_name =
                        "component:units/driver#view"] unsafe extern "C" fn
                        export_view(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_view_cabi::<$ty > (arg0, arg1) }
                        #[export_name = "cabi_post_component:units/driver#view"] unsafe
                        extern "C" fn _post_return_view(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_view::<$ty > (arg0) }
                        #[export_name = "component:units/driver#bind"] unsafe extern "C"
                        fn export_bind(arg0 : * mut u8, arg1 : usize, arg2 : i32, arg3 :
                        * mut u8, arg4 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_bind_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4) }
                        #[export_name = "cabi_post_component:units/driver#bind"] unsafe
                        extern "C" fn _post_return_bind(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_bind::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_units_driver_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_driver_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::units::driver::__export_component_units_driver_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::units::driver);
    };
}
#[doc(inline)]
pub(crate) use __export_driver_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:units:driver-world:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 802] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9f\x05\x01A\x02\x01\
A\x06\x01B\x0b\x01m\x04\x03get\x04post\x03put\x06delete\x04\0\x06method\x03\0\0\x01\
o\x02ss\x01p\x02\x01ks\x01r\x04\x06method\x01\x03urls\x07headers\x03\x04body\x04\
\x04\0\x07request\x03\0\x05\x01r\x03\x06status{\x07headers\x03\x04bodys\x04\0\x08\
response\x03\0\x07\x01@\x01\x07request\x06\0\x08\x04\0\x0csend-request\x01\x09\x03\
\0\x14component:units/http\x05\0\x01B\x08\x01q\x05\x09not-found\x01s\0\x0binvali\
d-key\x01s\0\x0csystem-error\x01s\0\x11permission-denied\x01s\0\x0dunknown-error\
\x01s\0\x04\0\x0dstorage-error\x03\0\0\x01j\x01s\x01\x01\x01@\x01\x03keys\0\x02\x04\
\0\x03get\x01\x03\x01j\0\x01\x01\x01@\x02\x03keys\x05values\0\x04\x04\0\x03set\x01\
\x05\x03\0\x17component:units/storage\x05\x01\x01B\x0e\x01q\x04\x11permission-de\
nied\x01s\0\x0csystem-error\x01s\0\x0dinvalid-input\x01s\0\x0dunknown-error\x01s\
\0\x04\0\x0cdriver-error\x03\0\0\x01j\x01s\x01\x01\x01@\x01\x05inputs\0\x02\x04\0\
\x06intend\x01\x03\x01j\0\x01\x01\x01@\x01\x05inputs\0\x04\x04\0\x04done\x01\x05\
\x01@\x03\x03fros\x02tos\x05values\0\x04\x04\0\x08transfer\x01\x06\x04\0\x04view\
\x01\x03\x01ks\x01@\x02\x05inputs\x08existing\x07\0\x02\x04\0\x04bind\x01\x08\x04\
\0\x16component:units/driver\x05\x02\x04\0\x1ccomponent:units/driver-world\x04\0\
\x0b\x12\x01\0\x0cdriver-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
